package org.apache.metron.profiler.bolt;

import org.apache.storm.Config;
import org.apache.storm.task.OutputCollector;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsDeclarer;
import org.apache.storm.topology.base.BaseRichBolt;
import org.apache.storm.tuple.Fields;
import org.apache.storm.tuple.Tuple;
import org.apache.storm.tuple.Values;

import java.util.Map;

/**
 * Generates tick tuples for a topology.
 *
 * <p>Storm's implementation of tick tuples is not compatible with how it handles
 * event time fields.
 */
public class TickBolt extends BaseRichBolt {

  private static final String TIMESTAMP_TUPLE_FIELD = "timestamp";
  private static final String FREQUENCY_TUPLE_FIELD = "rate_secs";

  private OutputCollector collector;

  /**
   * The frequency at which tick tuples are generated by this bolt.
   */
  private long tickFrequencySeconds;

  /**
   * The name of the timestamp field that is added to each outgoing tick tuple.
   *
   * <p>By default, this is set to 'timestamp'.
   */
  private String timestampField = "timestamp";

  /**
   * Defines the frequency at which the bolt will receive tick tuples.
   */
  @Override
  public Map<String, Object> getComponentConfiguration() {

    Map<String, Object> conf = super.getComponentConfiguration();
    conf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, tickFrequencySeconds);
    return conf;
  }

  @Override
  public void prepare(Map map, TopologyContext topologyContext, OutputCollector outputCollector) {
    this.collector = outputCollector;
  }

  /**
   * Emits 'custom' tick tuples.  These 'custom' tick tuples simply have a
   * timestamp field added to the tuple.
   *
   * <p>When using Storm's event timestamp field via `BaseWindowedBolt.withTimestampField`,
   * a bolt cannot also use Storm's tick tuples.  The bolt will attempt to extract the
   * timestamp field from the tick tuple.  Since the tick tuple does not contain this field
   * an exception is thrown and the topology dies.
   *
   * <p>This works around the issue by generating tick tuples
   *
   *
   *
   * @param tuple
   */
  @Override
  public void execute(Tuple tuple) {

    long timestamp = System.currentTimeMillis();
    Values values = new Values(timestamp, tickFrequencySeconds);
    collector.emit(values);
  }

  @Override
  public void declareOutputFields(OutputFieldsDeclarer declarer) {

    Fields fields = new Fields(TIMESTAMP_TUPLE_FIELD, FREQUENCY_TUPLE_FIELD);
    declarer.declare(fields);
  }

  public long getTickFrequencySeconds() {
    return tickFrequencySeconds;
  }

  /**
   * Sets the frequency in seconds at which tick tuples will be emitted.
   *
   * @param tickFrequencySeconds The tick frequency in seconds.
   */
  public void setTickFrequencySeconds(long tickFrequencySeconds) {
    this.tickFrequencySeconds = tickFrequencySeconds;
  }

  public String getTimestampField() {
    return timestampField;
  }

  /**
   * Defines the name of the timestamp field that is added to each tick tuple.
   * @param timestampField The name of the timestamp field.
   */
  public void setTimestampField(String timestampField) {
    this.timestampField = timestampField;
  }
}
